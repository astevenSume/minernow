// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	dao "utils/otc/dao"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeOtcControllers(in *jlexer.Lexer, out *apiChangeUsdtStatusMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = uint64(in.Uint64())
		case "status":
			out.Status = uint8(in.Uint8())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers(out *jwriter.Writer, in apiChangeUsdtStatusMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UID))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Status))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiChangeUsdtStatusMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiChangeUsdtStatusMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiChangeUsdtStatusMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiChangeUsdtStatusMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers1(in *jlexer.Lexer, out *apiAdminTaskMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers1(out *jwriter.Writer, in apiAdminTaskMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiAdminTaskMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiAdminTaskMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiAdminTaskMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiAdminTaskMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers1(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers2(in *jlexer.Lexer, out *apiAdminTaskList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]apiAdminTask, 0, 1)
					} else {
						out.Items = []apiAdminTask{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 apiAdminTask
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers2(out *jwriter.Writer, in apiAdminTaskList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiAdminTaskList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiAdminTaskList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiAdminTaskList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiAdminTaskList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers2(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers3(in *jlexer.Lexer, out *apiAdminTask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "spec":
			out.Spec = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "prev":
			out.Prev = string(in.String())
		case "next":
			out.Next = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers3(out *jwriter.Writer, in apiAdminTask) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Spec))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"prev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prev))
	}
	{
		const prefix string = ",\"next\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Next))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v apiAdminTask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v apiAdminTask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *apiAdminTask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *apiAdminTask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers3(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers4(in *jlexer.Lexer, out *VerificationCodeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_mobile":
			out.NewMobile = string(in.String())
		case "verification_code":
			out.VerificationCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers4(out *jwriter.Writer, in VerificationCodeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewMobile))
	}
	if in.VerificationCode != "" {
		const prefix string = ",\"verification_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VerificationCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VerificationCodeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VerificationCodeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VerificationCodeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VerificationCodeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers4(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers5(in *jlexer.Lexer, out *UserSignMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.Uid = string(in.String())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers5(out *jwriter.Writer, in UserSignMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	{
		const prefix string = ",\"signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSignMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSignMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSignMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSignMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers5(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers6(in *jlexer.Lexer, out *UserSetSettingMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wealth_notice":
			out.WealthNotice = bool(in.Bool())
		case "order_notice":
			out.OrderNotice = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers6(out *jwriter.Writer, in UserSetSettingMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wealth_notice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WealthNotice))
	}
	{
		const prefix string = ",\"order_notice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OrderNotice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSetSettingMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSetSettingMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSetSettingMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSetSettingMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers6(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers7(in *jlexer.Lexer, out *UserPayPassVerifyBySignMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers7(out *jwriter.Writer, in UserPayPassVerifyBySignMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	{
		const prefix string = ",\"signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPayPassVerifyBySignMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPayPassVerifyBySignMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPayPassVerifyBySignMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPayPassVerifyBySignMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers7(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers8(in *jlexer.Lexer, out *UserPayPassVerifyByPasswordMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers8(out *jwriter.Writer, in UserPayPassVerifyByPasswordMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPayPassVerifyByPasswordMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPayPassVerifyByPasswordMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPayPassVerifyByPasswordMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPayPassVerifyByPasswordMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers8(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers9(in *jlexer.Lexer, out *UserPayPassSetVerifyStepMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verify_step":
			out.VerifyStep = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers9(out *jwriter.Writer, in UserPayPassSetVerifyStepMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verify_step\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VerifyStep))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPayPassSetVerifyStepMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPayPassSetVerifyStepMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPayPassSetVerifyStepMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPayPassSetVerifyStepMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers9(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers10(in *jlexer.Lexer, out *UserPayPassSetPasswordMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = int(in.Int())
		case "verify_code":
			out.Msm = string(in.String())
		case "oldpwd":
			out.OldPassword = string(in.String())
		case "newpwd":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers10(out *jwriter.Writer, in UserPayPassSetPasswordMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Method))
	}
	if in.Msm != "" {
		const prefix string = ",\"verify_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Msm))
	}
	if in.OldPassword != "" {
		const prefix string = ",\"oldpwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"newpwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPayPassSetPasswordMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPayPassSetPasswordMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPayPassSetPasswordMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPayPassSetPasswordMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers10(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers11(in *jlexer.Lexer, out *UserLoginRespMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.Uid = string(in.String())
		case "national_code":
			out.NationalCode = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "first":
			out.First = bool(in.Bool())
		case "status":
			out.Status = int8(in.Int8())
		case "name":
			out.Name = string(in.String())
		case "ctime":
			out.Ctime = int64(in.Int64())
		case "utime":
			out.Utime = int64(in.Int64())
		case "ltime":
			out.LastLoginTime = int64(in.Int64())
		case "exchanger":
			out.IsExchanger = int8(in.Int8())
		case "sign_salt":
			out.SignSalt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers11(out *jwriter.Writer, in UserLoginRespMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"national_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NationalCode))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"first\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.First))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Status))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ctime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ctime))
	}
	{
		const prefix string = ",\"utime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Utime))
	}
	{
		const prefix string = ",\"ltime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastLoginTime))
	}
	{
		const prefix string = ",\"exchanger\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.IsExchanger))
	}
	{
		const prefix string = ",\"sign_salt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SignSalt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLoginRespMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLoginRespMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLoginRespMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLoginRespMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers11(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers12(in *jlexer.Lexer, out *UserLoginMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "national_code":
			out.NationalCode = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "verify_code":
			out.Sms = string(in.String())
		case "invite_code":
			out.InviteCode = string(in.String())
		case "nick":
			out.Nick = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers12(out *jwriter.Writer, in UserLoginMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"national_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NationalCode))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	if in.Sms != "" {
		const prefix string = ",\"verify_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sms))
	}
	{
		const prefix string = ",\"invite_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InviteCode))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nick))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLoginMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLoginMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLoginMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLoginMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers12(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers13(in *jlexer.Lexer, out *UserEditInfoMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers13(out *jwriter.Writer, in UserEditInfoMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEditInfoMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEditInfoMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEditInfoMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEditInfoMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers13(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers14(in *jlexer.Lexer, out *UsdtTransferMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "amount":
			out.Amount = string(in.String())
		case "memo":
			out.Memo = string(in.String())
		case "fee":
			out.Fee = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers14(out *jwriter.Writer, in UsdtTransferMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"memo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Memo))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fee))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdtTransferMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdtTransferMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdtTransferMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdtTransferMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers14(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers15(in *jlexer.Lexer, out *UsdtSyncRechargeTransactionByMobileMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "national_code":
			out.NationalCode = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers15(out *jwriter.Writer, in UsdtSyncRechargeTransactionByMobileMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"national_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NationalCode))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdtSyncRechargeTransactionByMobileMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdtSyncRechargeTransactionByMobileMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdtSyncRechargeTransactionByMobileMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdtSyncRechargeTransactionByMobileMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers15(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers16(in *jlexer.Lexer, out *UsdtReleaseMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers16(out *jwriter.Writer, in UsdtReleaseMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdtReleaseMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdtReleaseMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdtReleaseMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdtReleaseMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers16(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers17(in *jlexer.Lexer, out *UsdtMortgageMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers17(out *jwriter.Writer, in UsdtMortgageMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsdtMortgageMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsdtMortgageMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsdtMortgageMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsdtMortgageMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers17(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers18(in *jlexer.Lexer, out *UpdateMobileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers18(out *jwriter.Writer, in UpdateMobileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateMobileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateMobileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateMobileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateMobileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers18(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers19(in *jlexer.Lexer, out *SmsSendCodeMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "national_code":
			out.NationalCode = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "action":
			out.Action = string(in.String())
		case "invite_code":
			out.InviteCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers19(out *jwriter.Writer, in SmsSendCodeMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"national_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NationalCode))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"invite_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InviteCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmsSendCodeMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmsSendCodeMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmsSendCodeMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmsSendCodeMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers19(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers20(in *jlexer.Lexer, out *SmsCodeUserSendCodeMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Action":
			out.Action = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers20(out *jwriter.Writer, in SmsCodeUserSendCodeMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Action))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmsCodeUserSendCodeMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmsCodeUserSendCodeMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmsCodeUserSendCodeMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmsCodeUserSendCodeMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers20(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers21(in *jlexer.Lexer, out *SellStartMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "able":
			out.Able = bool(in.Bool())
		case "lower_limit":
			out.LowerLimit = int64(in.Int64())
		case "day_limit":
			out.DayLimit = int64(in.Int64())
		case "pay_type":
			if in.IsNull() {
				in.Skip()
				out.PayType = nil
			} else {
				in.Delim('[')
				if out.PayType == nil {
					if !in.IsDelim(']') {
						out.PayType = make([]int8, 0, 64)
					} else {
						out.PayType = []int8{}
					}
				} else {
					out.PayType = (out.PayType)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int8
					v4 = int8(in.Int8())
					out.PayType = append(out.PayType, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers21(out *jwriter.Writer, in SellStartMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"able\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Able))
	}
	{
		const prefix string = ",\"lower_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LowerLimit))
	}
	{
		const prefix string = ",\"day_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DayLimit))
	}
	{
		const prefix string = ",\"pay_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PayType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.PayType {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SellStartMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SellStartMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SellStartMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SellStartMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers21(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers22(in *jlexer.Lexer, out *SellPostMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "funds":
			out.Funds = int64(in.Int64())
		case "quantity":
			out.Quantity = int64(in.Int64())
		case "pay_id":
			out.PayId = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers22(out *jwriter.Writer, in SellPostMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"funds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Funds))
	}
	{
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Quantity))
	}
	{
		const prefix string = ",\"pay_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PayId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SellPostMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SellPostMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SellPostMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SellPostMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers22(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers23(in *jlexer.Lexer, out *SellPayMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pay_id":
			out.PayId = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers23(out *jwriter.Writer, in SellPayMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pay_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PayId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SellPayMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SellPayMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SellPayMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SellPayMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers23(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers24(in *jlexer.Lexer, out *PaymentMethodsReOrderMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]dao.Pmid2Ord, 0, 4)
					} else {
						out.Data = []dao.Pmid2Ord{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 dao.Pmid2Ord
					easyjsonC5a4559bDecodeUtilsOtcDao(in, &v7)
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers24(out *jwriter.Writer, in PaymentMethodsReOrderMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonC5a4559bEncodeUtilsOtcDao(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethodsReOrderMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethodsReOrderMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethodsReOrderMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethodsReOrderMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers24(l, v)
}
func easyjsonC5a4559bDecodeUtilsOtcDao(in *jlexer.Lexer, out *dao.Pmid2Ord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Pmid = uint64(in.Uint64())
		case "ord":
			out.Ord = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsOtcDao(out *jwriter.Writer, in dao.Pmid2Ord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Pmid))
	}
	{
		const prefix string = ",\"ord\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ord))
	}
	out.RawByte('}')
}
func easyjsonC5a4559bDecodeOtcControllers25(in *jlexer.Lexer, out *PaymentMethodsEditMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mtype":
			out.Type = uint8(in.Uint8())
		case "name":
			out.Name = string(in.String())
		case "account":
			out.Account = string(in.String())
		case "bank":
			out.Bank = string(in.String())
		case "bank_branch":
			out.BankBranch = string(in.String())
		case "qr_code":
			out.QrCode = string(in.String())
		case "low_money_per_tx_limit":
			out.LowMoneyPerTxLimit = int64(in.Int64())
		case "high_money_per_tx_limit":
			out.HighMoneyPerTxLimit = int64(in.Int64())
		case "times_per_day_limit":
			out.TimesPerDayLimit = int64(in.Int64())
		case "money_per_day_limit":
			out.MoneyPerDayLimit = int64(in.Int64())
		case "money_sum_limit":
			out.MoneySumLimit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers25(out *jwriter.Writer, in PaymentMethodsEditMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"mtype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Account != "" {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	if in.Bank != "" {
		const prefix string = ",\"bank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bank))
	}
	if in.BankBranch != "" {
		const prefix string = ",\"bank_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BankBranch))
	}
	if in.QrCode != "" {
		const prefix string = ",\"qr_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QrCode))
	}
	if in.LowMoneyPerTxLimit != 0 {
		const prefix string = ",\"low_money_per_tx_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LowMoneyPerTxLimit))
	}
	if in.HighMoneyPerTxLimit != 0 {
		const prefix string = ",\"high_money_per_tx_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HighMoneyPerTxLimit))
	}
	if in.TimesPerDayLimit != 0 {
		const prefix string = ",\"times_per_day_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TimesPerDayLimit))
	}
	if in.MoneyPerDayLimit != 0 {
		const prefix string = ",\"money_per_day_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MoneyPerDayLimit))
	}
	if in.MoneySumLimit != 0 {
		const prefix string = ",\"money_sum_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MoneySumLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethodsEditMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethodsEditMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethodsEditMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethodsEditMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers25(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers26(in *jlexer.Lexer, out *PaymentMethodsBindMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = uint8(in.Uint8())
		case "name":
			out.Name = string(in.String())
		case "account":
			out.Account = string(in.String())
		case "bank":
			out.Bank = string(in.String())
		case "bank_branch":
			out.BankBranch = string(in.String())
		case "qr_code":
			out.QrCode = string(in.String())
		case "verify_code":
			out.Sms = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers26(out *jwriter.Writer, in PaymentMethodsBindMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	if in.Bank != "" {
		const prefix string = ",\"bank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bank))
	}
	if in.BankBranch != "" {
		const prefix string = ",\"bank_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BankBranch))
	}
	if in.QrCode != "" {
		const prefix string = ",\"qr_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QrCode))
	}
	{
		const prefix string = ",\"verify_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sms))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentMethodsBindMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentMethodsBindMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentMethodsBindMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentMethodsBindMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers26(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers27(in *jlexer.Lexer, out *OtcMessageMethodAddMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderId = uint64(in.Uint64())
		case "uid":
			out.Uid = uint64(in.Uint64())
		case "msg_type":
			out.MsgType = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers27(out *jwriter.Writer, in OtcMessageMethodAddMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.OrderId))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"msg_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MsgType))
	}
	{
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtcMessageMethodAddMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtcMessageMethodAddMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtcMessageMethodAddMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtcMessageMethodAddMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers27(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers28(in *jlexer.Lexer, out *NewMobileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "new_mobile":
			out.NewMobile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers28(out *jwriter.Writer, in NewMobileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"new_mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewMobile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewMobileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewMobileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewMobileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewMobileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers28(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers29(in *jlexer.Lexer, out *GameTransferOutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = uint32(in.Uint32())
		case "eusd":
			out.Eusd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers29(out *jwriter.Writer, in GameTransferOutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ChannelId))
	}
	{
		const prefix string = ",\"eusd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eusd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameTransferOutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameTransferOutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameTransferOutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameTransferOutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers29(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers30(in *jlexer.Lexer, out *GameTransferInMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = uint32(in.Uint32())
		case "eusd":
			out.Eusd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers30(out *jwriter.Writer, in GameTransferInMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ChannelId))
	}
	{
		const prefix string = ",\"eusd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eusd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameTransferInMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameTransferInMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameTransferInMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameTransferInMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers30(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers31(in *jlexer.Lexer, out *GameLoginMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = uint32(in.Uint32())
		case "app_id":
			out.MaskId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers31(out *jwriter.Writer, in GameLoginMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ChannelId))
	}
	{
		const prefix string = ",\"app_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaskId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameLoginMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameLoginMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameLoginMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameLoginMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers31(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers32(in *jlexer.Lexer, out *ExchangeTransferOutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers32(out *jwriter.Writer, in ExchangeTransferOutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeTransferOutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeTransferOutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeTransferOutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeTransferOutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers32(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers33(in *jlexer.Lexer, out *ExchangeTransferIntoMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers33(out *jwriter.Writer, in ExchangeTransferIntoMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeTransferIntoMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeTransferIntoMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeTransferIntoMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeTransferIntoMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers33(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers34(in *jlexer.Lexer, out *ExchangeApplyMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat":
			out.Wechat = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "telegram":
			out.Telegram = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers34(out *jwriter.Writer, in ExchangeApplyMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Wechat))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"telegram\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Telegram))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeApplyMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeApplyMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeApplyMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeApplyMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers34(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers35(in *jlexer.Lexer, out *EosTransferMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "national_code":
			out.NationalCode = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "memo":
			out.Memo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers35(out *jwriter.Writer, in EosTransferMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"national_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NationalCode))
	}
	{
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"memo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Memo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EosTransferMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EosTransferMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EosTransferMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EosTransferMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers35(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers36(in *jlexer.Lexer, out *BuyStartMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "able":
			out.Able = bool(in.Bool())
		case "lower_limit":
			out.LowerLimit = int64(in.Int64())
		case "day_limit":
			out.DayLimit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers36(out *jwriter.Writer, in BuyStartMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"able\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Able))
	}
	{
		const prefix string = ",\"lower_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LowerLimit))
	}
	{
		const prefix string = ",\"day_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DayLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuyStartMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuyStartMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuyStartMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuyStartMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers36(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers37(in *jlexer.Lexer, out *BuyPostMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "funds":
			out.Funds = int64(in.Int64())
		case "quantity":
			out.Quantity = int64(in.Int64())
		case "pay_id":
			out.PayId = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers37(out *jwriter.Writer, in BuyPostMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"funds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Funds))
	}
	{
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Quantity))
	}
	{
		const prefix string = ",\"pay_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PayId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuyPostMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuyPostMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuyPostMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuyPostMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers37(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers38(in *jlexer.Lexer, out *BaseCheck2StepMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "verify_code":
			out.VerifyCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers38(out *jwriter.Writer, in BaseCheck2StepMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.VerifyCode != "" {
		const prefix string = ",\"verify_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VerifyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseCheck2StepMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseCheck2StepMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseCheck2StepMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseCheck2StepMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers38(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers39(in *jlexer.Lexer, out *AppealCreateAppealMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int8(in.Int8())
		case "context":
			out.Context = string(in.String())
		case "wechat":
			out.WeChat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers39(out *jwriter.Writer, in AppealCreateAppealMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Type))
	}
	{
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Context))
	}
	{
		const prefix string = ",\"wechat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WeChat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppealCreateAppealMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppealCreateAppealMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppealCreateAppealMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppealCreateAppealMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers39(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers40(in *jlexer.Lexer, out *ApiSyncUsdtTransactionMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.Uid = uint64(in.Uint64())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers40(out *jwriter.Writer, in ApiSyncUsdtTransactionMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiSyncUsdtTransactionMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiSyncUsdtTransactionMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiSyncUsdtTransactionMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiSyncUsdtTransactionMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers40(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers41(in *jlexer.Lexer, out *ApiRejectTransferOutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers41(out *jwriter.Writer, in ApiRejectTransferOutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiRejectTransferOutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiRejectTransferOutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiRejectTransferOutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiRejectTransferOutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers41(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers42(in *jlexer.Lexer, out *ApiEusdRechargeMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.Uid = uint64(in.Uint64())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "quantity":
			out.Quantity = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers42(out *jwriter.Writer, in ApiEusdRechargeMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Uid))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	{
		const prefix string = ",\"quantity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiEusdRechargeMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiEusdRechargeMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiEusdRechargeMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiEusdRechargeMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers42(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers43(in *jlexer.Lexer, out *ApiDistributeCommissionMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers43(out *jwriter.Writer, in ApiDistributeCommissionMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiDistributeCommissionMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiDistributeCommissionMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiDistributeCommissionMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiDistributeCommissionMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers43(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers44(in *jlexer.Lexer, out *ApiConfirmOrderPayMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "admin_id":
			out.AdminId = uint32(in.Uint32())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers44(out *jwriter.Writer, in ApiConfirmOrderPayMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.AdminId))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiConfirmOrderPayMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiConfirmOrderPayMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiConfirmOrderPayMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiConfirmOrderPayMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers44(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers45(in *jlexer.Lexer, out *ApiConfirmOrderMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "admin_id":
			out.AdminId = uint32(in.Uint32())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers45(out *jwriter.Writer, in ApiConfirmOrderMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.AdminId))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiConfirmOrderMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiConfirmOrderMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiConfirmOrderMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiConfirmOrderMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers45(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers46(in *jlexer.Lexer, out *ApiCancelOrderMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "admin_id":
			out.AdminId = uint32(in.Uint32())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers46(out *jwriter.Writer, in ApiCancelOrderMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"admin_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.AdminId))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCancelOrderMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCancelOrderMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCancelOrderMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCancelOrderMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers46(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers47(in *jlexer.Lexer, out *ApiCalcCommissionMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers47(out *jwriter.Writer, in ApiCalcCommissionMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiCalcCommissionMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiCalcCommissionMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiCalcCommissionMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiCalcCommissionMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers47(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers48(in *jlexer.Lexer, out *ApiApproveTransferOutMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "timestamp":
			out.Timestamp = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers48(out *jwriter.Writer, in ApiApproveTransferOutMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiApproveTransferOutMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiApproveTransferOutMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiApproveTransferOutMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiApproveTransferOutMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers48(l, v)
}
func easyjsonC5a4559bDecodeOtcControllers49(in *jlexer.Lexer, out *AgentWithdrawMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeOtcControllers49(out *jwriter.Writer, in AgentWithdrawMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AgentWithdrawMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeOtcControllers49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AgentWithdrawMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeOtcControllers49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AgentWithdrawMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeOtcControllers49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AgentWithdrawMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeOtcControllers49(l, v)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: explorer.go

// Package mock_explorer is a generated GoMock package.
package mock_explorer

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExplorerInterface is a mock of ExplorerInterface interface
type MockExplorerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerInterfaceMockRecorder
}

// MockExplorerInterfaceMockRecorder is the mock recorder for MockExplorerInterface
type MockExplorerInterfaceMockRecorder struct {
	mock *MockExplorerInterface
}

// NewMockExplorerInterface creates a new mock instance
func NewMockExplorerInterface(ctrl *gomock.Controller) *MockExplorerInterface {
	mock := &MockExplorerInterface{ctrl: ctrl}
	mock.recorder = &MockExplorerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExplorerInterface) EXPECT() *MockExplorerInterfaceMockRecorder {
	return m.recorder
}

// Balances mocks base method
func (m *MockExplorerInterface) Balances(addrs []string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balances", addrs)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balances indicates an expected call of Balances
func (mr *MockExplorerInterfaceMockRecorder) Balances(addrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balances", reflect.TypeOf((*MockExplorerInterface)(nil).Balances), addrs)
}

// AddrDetails mocks base method
func (m *MockExplorerInterface) AddrDetails(addr string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrDetails", addr)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddrDetails indicates an expected call of AddrDetails
func (mr *MockExplorerInterfaceMockRecorder) AddrDetails(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrDetails", reflect.TypeOf((*MockExplorerInterface)(nil).AddrDetails), addr)
}

// GetArmoryGetUnsigned mocks base method
func (m *MockExplorerInterface) GetArmoryGetUnsigned(unsignedHex, pubKey string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArmoryGetUnsigned", unsignedHex, pubKey)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArmoryGetUnsigned indicates an expected call of GetArmoryGetUnsigned
func (mr *MockExplorerInterfaceMockRecorder) GetArmoryGetUnsigned(unsignedHex, pubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArmoryGetUnsigned", reflect.TypeOf((*MockExplorerInterface)(nil).GetArmoryGetUnsigned), unsignedHex, pubKey)
}

// GetRawTransaction mocks base method
func (m *MockExplorerInterface) GetRawTransaction(armoryTransaction string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransaction", armoryTransaction)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransaction indicates an expected call of GetRawTransaction
func (mr *MockExplorerInterfaceMockRecorder) GetRawTransaction(armoryTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransaction", reflect.TypeOf((*MockExplorerInterface)(nil).GetRawTransaction), armoryTransaction)
}

// DecodeRaw mocks base method
func (m *MockExplorerInterface) DecodeRaw(hex string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRaw", hex)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRaw indicates an expected call of DecodeRaw
func (mr *MockExplorerInterfaceMockRecorder) DecodeRaw(hex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRaw", reflect.TypeOf((*MockExplorerInterface)(nil).DecodeRaw), hex)
}

// GetOmnidexDesignatingCurrencies mocks base method
func (m *MockExplorerInterface) GetOmnidexDesignatingCurrencies(ecosystem int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOmnidexDesignatingCurrencies", ecosystem)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOmnidexDesignatingCurrencies indicates an expected call of GetOmnidexDesignatingCurrencies
func (mr *MockExplorerInterfaceMockRecorder) GetOmnidexDesignatingCurrencies(ecosystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOmnidexDesignatingCurrencies", reflect.TypeOf((*MockExplorerInterface)(nil).GetOmnidexDesignatingCurrencies), ecosystem)
}

// PropertyGetHistory mocks base method
func (m *MockExplorerInterface) PropertyGetHistory(page int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyGetHistory", page)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyGetHistory indicates an expected call of PropertyGetHistory
func (mr *MockExplorerInterfaceMockRecorder) PropertyGetHistory(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyGetHistory", reflect.TypeOf((*MockExplorerInterface)(nil).PropertyGetHistory), page)
}

// PropertiesListByOwner mocks base method
func (m *MockExplorerInterface) PropertiesListByOwner(addresses string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesListByOwner", addresses)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesListByOwner indicates an expected call of PropertiesListByOwner
func (mr *MockExplorerInterfaceMockRecorder) PropertiesListByOwner(addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesListByOwner", reflect.TypeOf((*MockExplorerInterface)(nil).PropertiesListByOwner), addresses)
}

// PropertiesListActiveCrowdSales mocks base method
func (m *MockExplorerInterface) PropertiesListActiveCrowdSales(ecosystem int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesListActiveCrowdSales", ecosystem)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesListActiveCrowdSales indicates an expected call of PropertiesListActiveCrowdSales
func (mr *MockExplorerInterfaceMockRecorder) PropertiesListActiveCrowdSales(ecosystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesListActiveCrowdSales", reflect.TypeOf((*MockExplorerInterface)(nil).PropertiesListActiveCrowdSales), ecosystem)
}

// PropertiesListByEcosystem mocks base method
func (m *MockExplorerInterface) PropertiesListByEcosystem(ecosystem int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesListByEcosystem", ecosystem)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesListByEcosystem indicates an expected call of PropertiesListByEcosystem
func (mr *MockExplorerInterfaceMockRecorder) PropertiesListByEcosystem(ecosystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesListByEcosystem", reflect.TypeOf((*MockExplorerInterface)(nil).PropertiesListByEcosystem), ecosystem)
}

// PropertiesList mocks base method
func (m *MockExplorerInterface) PropertiesList(ecosystem int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesList", ecosystem)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesList indicates an expected call of PropertiesList
func (mr *MockExplorerInterfaceMockRecorder) PropertiesList(ecosystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesList", reflect.TypeOf((*MockExplorerInterface)(nil).PropertiesList), ecosystem)
}

// Search mocks base method
func (m *MockExplorerInterface) Search(query string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockExplorerInterfaceMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockExplorerInterface)(nil).Search), query)
}

// TransactionAddress mocks base method
func (m *MockExplorerInterface) TransactionAddress(addr string, page int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionAddress", addr, page)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionAddress indicates an expected call of TransactionAddress
func (mr *MockExplorerInterfaceMockRecorder) TransactionAddress(addr, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionAddress", reflect.TypeOf((*MockExplorerInterface)(nil).TransactionAddress), addr, page)
}

// TransactionPush mocks base method
func (m *MockExplorerInterface) TransactionPush(signedTransaction string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionPush", signedTransaction)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionPush indicates an expected call of TransactionPush
func (mr *MockExplorerInterfaceMockRecorder) TransactionPush(signedTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionPush", reflect.TypeOf((*MockExplorerInterface)(nil).TransactionPush), signedTransaction)
}

// Transaction mocks base method
func (m *MockExplorerInterface) Transaction(hash string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction
func (mr *MockExplorerInterfaceMockRecorder) Transaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockExplorerInterface)(nil).Transaction), hash)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gameapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeUtilsGameDaoGameapi(in *jlexer.Lexer, out *RGTransferRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi(out *jwriter.Writer, in RGTransferRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGTransferRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGTransferRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGTransferRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGTransferRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi1(in *jlexer.Lexer, out *RGTransferReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.UserName = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		case "prefix":
			out.Prefix = string(in.String())
		case "merchantordernumber":
			out.MerchantOrderNumber = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "amount":
			out.Amount = float64(in.Float64())
		case "datetime":
			out.Datetime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi1(out *jwriter.Writer, in RGTransferReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	{
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"merchantordernumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerchantOrderNumber))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGTransferReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGTransferReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGTransferReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGTransferReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi1(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi2(in *jlexer.Lexer, out *RGTransferReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = float64(in.Float64())
		case "orderNumber":
			out.OrderNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi2(out *jwriter.Writer, in RGTransferReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Balance))
	}
	{
		const prefix string = ",\"orderNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGTransferReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGTransferReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGTransferReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGTransferReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi2(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi3(in *jlexer.Lexer, out *RGLotteryListRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi3(out *jwriter.Writer, in RGLotteryListRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLotteryListRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLotteryListRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLotteryListRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLotteryListRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi3(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi4(in *jlexer.Lexer, out *RGLotteryListReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prefix":
			out.Prefix = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		case "datetime":
			out.Datetime = string(in.String())
		case "starttime":
			out.StartTime = string(in.String())
		case "endtime":
			out.EndTime = string(in.String())
		case "pageindex":
			out.PageIndex = int(in.Int())
		case "pagesize":
			out.PageSize = int(in.Int())
		case "status":
			out.Status = int(in.Int())
		case "searchtimetype":
			out.SearchTimeType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi4(out *jwriter.Writer, in RGLotteryListReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	{
		const prefix string = ",\"starttime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StartTime))
	}
	{
		const prefix string = ",\"endtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndTime))
	}
	{
		const prefix string = ",\"pageindex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageIndex))
	}
	{
		const prefix string = ",\"pagesize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageSize))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"searchtimetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SearchTimeType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLotteryListReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLotteryListReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLotteryListReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLotteryListReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi4(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi5(in *jlexer.Lexer, out *RGLotteryListReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "currentPageIndex":
			out.CurrentPageIndex = int(in.Int())
		case "totalPage":
			out.TotalPage = int(in.Int())
		case "dataList":
			if in.IsNull() {
				in.Skip()
				out.DataList = nil
			} else {
				in.Delim('[')
				if out.DataList == nil {
					if !in.IsDelim(']') {
						out.DataList = make([]RGLotteryList, 0, 1)
					} else {
						out.DataList = []RGLotteryList{}
					}
				} else {
					out.DataList = (out.DataList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RGLotteryList
					(v1).UnmarshalEasyJSON(in)
					out.DataList = append(out.DataList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi5(out *jwriter.Writer, in RGLotteryListReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"currentPageIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentPageIndex))
	}
	{
		const prefix string = ",\"totalPage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalPage))
	}
	{
		const prefix string = ",\"dataList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DataList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.DataList {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLotteryListReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLotteryListReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLotteryListReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLotteryListReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi5(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi6(in *jlexer.Lexer, out *RGLotteryList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "orderNumber":
			out.OrderNumber = string(in.String())
		case "periodName":
			out.PeriodName = string(in.String())
		case "gameNameID":
			out.GameNameID = int(in.Int())
		case "gameName":
			out.GameName = string(in.String())
		case "betCount":
			out.BetCount = int(in.Int())
		case "bettingAmount":
			out.BettingAmount = float64(in.Float64())
		case "state":
			out.State = int(in.Int())
		case "gameKindID":
			out.GameKindID = int(in.Int())
		case "addTime":
			out.AddTime = string(in.String())
		case "openNumber":
			out.OpenNumber = string(in.String())
		case "openDate":
			out.OpenDate = string(in.String())
		case "winLoseAmount":
			out.WinLoseAmount = float64(in.Float64())
		case "betContent":
			out.BetContent = string(in.String())
		case "gameKindName":
			out.GameKindName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi6(out *jwriter.Writer, in RGLotteryList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"orderNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderNumber))
	}
	{
		const prefix string = ",\"periodName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PeriodName))
	}
	{
		const prefix string = ",\"gameNameID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GameNameID))
	}
	{
		const prefix string = ",\"gameName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameName))
	}
	{
		const prefix string = ",\"betCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BetCount))
	}
	{
		const prefix string = ",\"bettingAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BettingAmount))
	}
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"gameKindID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GameKindID))
	}
	{
		const prefix string = ",\"addTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AddTime))
	}
	{
		const prefix string = ",\"openNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OpenNumber))
	}
	{
		const prefix string = ",\"openDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OpenDate))
	}
	{
		const prefix string = ",\"winLoseAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WinLoseAmount))
	}
	{
		const prefix string = ",\"betContent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetContent))
	}
	{
		const prefix string = ",\"gameKindName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameKindName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLotteryList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLotteryList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLotteryList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLotteryList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi6(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi7(in *jlexer.Lexer, out *RGLoginRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi7(out *jwriter.Writer, in RGLoginRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLoginRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLoginRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLoginRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLoginRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi7(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi8(in *jlexer.Lexer, out *RGLoginReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.UserName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "sign":
			out.Sign = string(in.String())
		case "prefix":
			out.Prefix = string(in.String())
		case "gameId":
			out.GameId = int(in.Int())
		case "datetime":
			out.Datetime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi8(out *jwriter.Writer, in RGLoginReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	{
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"gameId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GameId))
	}
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGLoginReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGLoginReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGLoginReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGLoginReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi8(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi9(in *jlexer.Lexer, out *RGBaseRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi9(out *jwriter.Writer, in RGBaseRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGBaseRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGBaseRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGBaseRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGBaseRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi9(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi10(in *jlexer.Lexer, out *RGBalanceRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi10(out *jwriter.Writer, in RGBalanceRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGBalanceRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGBalanceRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGBalanceRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGBalanceRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi10(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi11(in *jlexer.Lexer, out *RGBalanceReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.UserName = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		case "prefix":
			out.Prefix = string(in.String())
		case "datetime":
			out.Datetime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi11(out *jwriter.Writer, in RGBalanceReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	{
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGBalanceReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGBalanceReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGBalanceReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGBalanceReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi11(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi12(in *jlexer.Lexer, out *RGBalanceReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi12(out *jwriter.Writer, in RGBalanceReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Balance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGBalanceReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGBalanceReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGBalanceReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGBalanceReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi12(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi13(in *jlexer.Lexer, out *KYTransferOutResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "money":
			out.Money = string(in.String())
		case "account":
			out.Account = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi13(out *jwriter.Writer, in KYTransferOutResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"money\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Money))
	}
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferOutResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferOutResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferOutResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferOutResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi13(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi14(in *jlexer.Lexer, out *KYTransferOutResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.D).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi14(out *jwriter.Writer, in KYTransferOutResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.D).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferOutResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferOutResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferOutResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferOutResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi14(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi15(in *jlexer.Lexer, out *KYTransferInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = int(in.Int())
		case "money":
			out.Money = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi15(out *jwriter.Writer, in KYTransferInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"money\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Money))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi15(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi16(in *jlexer.Lexer, out *KYTransferInfoResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.D).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi16(out *jwriter.Writer, in KYTransferInfoResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.D).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferInfoResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferInfoResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferInfoResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferInfoResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi16(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi17(in *jlexer.Lexer, out *KYTransferInResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "money":
			out.Money = string(in.String())
		case "account":
			out.Account = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi17(out *jwriter.Writer, in KYTransferInResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"money\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Money))
	}
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferInResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferInResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferInResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferInResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi17(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi18(in *jlexer.Lexer, out *KYTransferInResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.D).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi18(out *jwriter.Writer, in KYTransferInResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.D).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYTransferInResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYTransferInResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYTransferInResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYTransferInResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi18(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi19(in *jlexer.Lexer, out *KYSyncResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		case "start":
			out.Start = int64(in.Int64())
		case "end":
			out.End = int64(in.Int64())
		case "list":
			(out.DataList).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi19(out *jwriter.Writer, in KYSyncResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.End))
	}
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DataList).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYSyncResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYSyncResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYSyncResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYSyncResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi19(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi20(in *jlexer.Lexer, out *KYSyncResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.Result).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi20(out *jwriter.Writer, in KYSyncResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYSyncResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYSyncResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYSyncResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYSyncResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi20(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi21(in *jlexer.Lexer, out *KYRecordBaseResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi21(out *jwriter.Writer, in KYRecordBaseResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYRecordBaseResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYRecordBaseResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYRecordBaseResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYRecordBaseResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi21(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi22(in *jlexer.Lexer, out *KYRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GameID":
			if in.IsNull() {
				in.Skip()
				out.GameID = nil
			} else {
				in.Delim('[')
				if out.GameID == nil {
					if !in.IsDelim(']') {
						out.GameID = make([]string, 0, 4)
					} else {
						out.GameID = []string{}
					}
				} else {
					out.GameID = (out.GameID)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.GameID = append(out.GameID, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]string, 0, 4)
					} else {
						out.Accounts = []string{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Accounts = append(out.Accounts, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ServerID":
			if in.IsNull() {
				in.Skip()
				out.ServerID = nil
			} else {
				in.Delim('[')
				if out.ServerID == nil {
					if !in.IsDelim(']') {
						out.ServerID = make([]int, 0, 8)
					} else {
						out.ServerID = []int{}
					}
				} else {
					out.ServerID = (out.ServerID)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.ServerID = append(out.ServerID, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "KindID":
			if in.IsNull() {
				in.Skip()
				out.KindID = nil
			} else {
				in.Delim('[')
				if out.KindID == nil {
					if !in.IsDelim(']') {
						out.KindID = make([]int, 0, 8)
					} else {
						out.KindID = []int{}
					}
				} else {
					out.KindID = (out.KindID)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.KindID = append(out.KindID, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TableID":
			if in.IsNull() {
				in.Skip()
				out.TableID = nil
			} else {
				in.Delim('[')
				if out.TableID == nil {
					if !in.IsDelim(']') {
						out.TableID = make([]int, 0, 8)
					} else {
						out.TableID = []int{}
					}
				} else {
					out.TableID = (out.TableID)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int
					v8 = int(in.Int())
					out.TableID = append(out.TableID, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ChairID":
			if in.IsNull() {
				in.Skip()
				out.ChairID = nil
			} else {
				in.Delim('[')
				if out.ChairID == nil {
					if !in.IsDelim(']') {
						out.ChairID = make([]int, 0, 8)
					} else {
						out.ChairID = []int{}
					}
				} else {
					out.ChairID = (out.ChairID)[:0]
				}
				for !in.IsDelim(']') {
					var v9 int
					v9 = int(in.Int())
					out.ChairID = append(out.ChairID, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UserCount":
			if in.IsNull() {
				in.Skip()
				out.UserCount = nil
			} else {
				in.Delim('[')
				if out.UserCount == nil {
					if !in.IsDelim(']') {
						out.UserCount = make([]int, 0, 8)
					} else {
						out.UserCount = []int{}
					}
				} else {
					out.UserCount = (out.UserCount)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.UserCount = append(out.UserCount, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CardValue":
			if in.IsNull() {
				in.Skip()
				out.CardValue = nil
			} else {
				in.Delim('[')
				if out.CardValue == nil {
					if !in.IsDelim(']') {
						out.CardValue = make([]string, 0, 4)
					} else {
						out.CardValue = []string{}
					}
				} else {
					out.CardValue = (out.CardValue)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.CardValue = append(out.CardValue, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CellScore":
			if in.IsNull() {
				in.Skip()
				out.CellScore = nil
			} else {
				in.Delim('[')
				if out.CellScore == nil {
					if !in.IsDelim(']') {
						out.CellScore = make([]string, 0, 4)
					} else {
						out.CellScore = []string{}
					}
				} else {
					out.CellScore = (out.CellScore)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.CellScore = append(out.CellScore, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllBet":
			if in.IsNull() {
				in.Skip()
				out.AllBet = nil
			} else {
				in.Delim('[')
				if out.AllBet == nil {
					if !in.IsDelim(']') {
						out.AllBet = make([]string, 0, 4)
					} else {
						out.AllBet = []string{}
					}
				} else {
					out.AllBet = (out.AllBet)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.AllBet = append(out.AllBet, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Profit":
			if in.IsNull() {
				in.Skip()
				out.Profit = nil
			} else {
				in.Delim('[')
				if out.Profit == nil {
					if !in.IsDelim(']') {
						out.Profit = make([]string, 0, 4)
					} else {
						out.Profit = []string{}
					}
				} else {
					out.Profit = (out.Profit)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.Profit = append(out.Profit, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Revenue":
			if in.IsNull() {
				in.Skip()
				out.Revenue = nil
			} else {
				in.Delim('[')
				if out.Revenue == nil {
					if !in.IsDelim(']') {
						out.Revenue = make([]string, 0, 4)
					} else {
						out.Revenue = []string{}
					}
				} else {
					out.Revenue = (out.Revenue)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.Revenue = append(out.Revenue, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GameStartTime":
			if in.IsNull() {
				in.Skip()
				out.GameStartTime = nil
			} else {
				in.Delim('[')
				if out.GameStartTime == nil {
					if !in.IsDelim(']') {
						out.GameStartTime = make([]string, 0, 4)
					} else {
						out.GameStartTime = []string{}
					}
				} else {
					out.GameStartTime = (out.GameStartTime)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.GameStartTime = append(out.GameStartTime, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GameEndTime":
			if in.IsNull() {
				in.Skip()
				out.GameEndTime = nil
			} else {
				in.Delim('[')
				if out.GameEndTime == nil {
					if !in.IsDelim(']') {
						out.GameEndTime = make([]string, 0, 4)
					} else {
						out.GameEndTime = []string{}
					}
				} else {
					out.GameEndTime = (out.GameEndTime)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.GameEndTime = append(out.GameEndTime, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ChannelID":
			if in.IsNull() {
				in.Skip()
				out.ChannelID = nil
			} else {
				in.Delim('[')
				if out.ChannelID == nil {
					if !in.IsDelim(']') {
						out.ChannelID = make([]int, 0, 8)
					} else {
						out.ChannelID = []int{}
					}
				} else {
					out.ChannelID = (out.ChannelID)[:0]
				}
				for !in.IsDelim(']') {
					var v18 int
					v18 = int(in.Int())
					out.ChannelID = append(out.ChannelID, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LineCode":
			if in.IsNull() {
				in.Skip()
				out.LineCode = nil
			} else {
				in.Delim('[')
				if out.LineCode == nil {
					if !in.IsDelim(']') {
						out.LineCode = make([]string, 0, 4)
					} else {
						out.LineCode = []string{}
					}
				} else {
					out.LineCode = (out.LineCode)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.LineCode = append(out.LineCode, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi22(out *jwriter.Writer, in KYRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GameID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GameID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.GameID {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Accounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Accounts {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ServerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ServerID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.ServerID {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"KindID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.KindID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.KindID {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TableID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TableID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.TableID {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v29))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ChairID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ChairID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.ChairID {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UserCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserCount == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.UserCount {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CardValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CardValue == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.CardValue {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CellScore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CellScore == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.CellScore {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllBet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllBet == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.AllBet {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Profit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Profit == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Profit {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Revenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Revenue == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Revenue {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GameStartTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GameStartTime == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.GameStartTime {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GameEndTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GameEndTime == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.GameEndTime {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ChannelID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ChannelID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.ChannelID {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v49))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"LineCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.LineCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.LineCode {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi22(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi23(in *jlexer.Lexer, out *KYLoginResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi23(out *jwriter.Writer, in KYLoginResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYLoginResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYLoginResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYLoginResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYLoginResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi23(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi24(in *jlexer.Lexer, out *KYLoginResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.D).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi24(out *jwriter.Writer, in KYLoginResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.D).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYLoginResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYLoginResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYLoginResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYLoginResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi24(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi25(in *jlexer.Lexer, out *KYBaseResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi25(out *jwriter.Writer, in KYBaseResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYBaseResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYBaseResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYBaseResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYBaseResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi25(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi26(in *jlexer.Lexer, out *KYAccountResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "money":
			out.Money = float64(in.Float64())
		case "account":
			out.Account = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi26(out *jwriter.Writer, in KYAccountResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"money\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Money))
	}
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYAccountResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYAccountResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYAccountResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYAccountResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi26(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi27(in *jlexer.Lexer, out *KYAccountResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d":
			(out.D).UnmarshalEasyJSON(in)
		case "s":
			out.S = int(in.Int())
		case "m":
			out.M = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi27(out *jwriter.Writer, in KYAccountResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.D).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.S))
	}
	{
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.M))
	}
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KYAccountResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KYAccountResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KYAccountResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KYAccountResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi27(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi28(in *jlexer.Lexer, out *AGTransferReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cagentType":
			out.CagentType = int(in.Int())
		case "userName":
			out.UserName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "orderNumber":
			out.OrderNumber = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "credit":
			out.Credit = string(in.String())
		case "timespan":
			out.Timespan = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi28(out *jwriter.Writer, in AGTransferReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cagentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CagentType))
	}
	{
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"orderNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderNumber))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"credit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Credit))
	}
	{
		const prefix string = ",\"timespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timespan))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGTransferReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGTransferReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGTransferReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGTransferReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi28(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi29(in *jlexer.Lexer, out *AGRegisterReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cagentType":
			out.CagentType = int(in.Int())
		case "userName":
			out.UserName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "timespan":
			out.Timespan = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi29(out *jwriter.Writer, in AGRegisterReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cagentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CagentType))
	}
	{
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"timespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timespan))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGRegisterReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGRegisterReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGRegisterReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGRegisterReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi29(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi30(in *jlexer.Lexer, out *AGQueryOrderReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cagentType":
			out.CagentType = int(in.Int())
		case "orderNumber":
			out.OrderNumber = string(in.String())
		case "timespan":
			out.Timespan = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi30(out *jwriter.Writer, in AGQueryOrderReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cagentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CagentType))
	}
	{
		const prefix string = ",\"orderNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderNumber))
	}
	{
		const prefix string = ",\"timespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timespan))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGQueryOrderReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGQueryOrderReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGQueryOrderReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGQueryOrderReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi30(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi31(in *jlexer.Lexer, out *AGLotteryList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playerName":
			out.PlayerName = string(in.String())
		case "gameType":
			out.GameType = string(in.String())
		case "gameName":
			out.GameName = string(in.String())
		case "billNo":
			out.OrderId = string(in.String())
		case "tableCode":
			out.TableCode = string(in.String())
		case "betAmount":
			out.BetAmount = float64(in.Float64())
		case "validBetAmount":
			out.ValidBetAmount = float64(in.Float64())
		case "netAmount":
			out.NetAmount = float64(in.Float64())
		case "betTime":
			out.BetTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi31(out *jwriter.Writer, in AGLotteryList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"gameType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameType))
	}
	{
		const prefix string = ",\"gameName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameName))
	}
	{
		const prefix string = ",\"billNo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	{
		const prefix string = ",\"tableCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TableCode))
	}
	{
		const prefix string = ",\"betAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BetAmount))
	}
	{
		const prefix string = ",\"validBetAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ValidBetAmount))
	}
	{
		const prefix string = ",\"netAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.NetAmount))
	}
	{
		const prefix string = ",\"betTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGLotteryList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGLotteryList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGLotteryList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGLotteryList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi31(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi32(in *jlexer.Lexer, out *AGLoginReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cagentType":
			out.CagentType = int(in.Int())
		case "userName":
			out.UserName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "gameType":
			out.GameType = string(in.String())
		case "oddtype":
			out.OddType = string(in.String())
		case "timespan":
			out.Timespan = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi32(out *jwriter.Writer, in AGLoginReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cagentType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CagentType))
	}
	{
		const prefix string = ",\"userName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"gameType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GameType))
	}
	{
		const prefix string = ",\"oddtype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OddType))
	}
	{
		const prefix string = ",\"timespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timespan))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sign))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGLoginReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGLoginReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGLoginReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGLoginReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi32(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi33(in *jlexer.Lexer, out *AGGetBetRecordsRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			out.Info = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "pageIndex":
			out.PageIndex = int(in.Int())
		case "pageSize":
			out.PageSize = int(in.Int())
		case "totalCount":
			out.TotalCount = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.DataList = nil
			} else {
				in.Delim('[')
				if out.DataList == nil {
					if !in.IsDelim(']') {
						out.DataList = make([]AGLotteryList, 0, 1)
					} else {
						out.DataList = []AGLotteryList{}
					}
				} else {
					out.DataList = (out.DataList)[:0]
				}
				for !in.IsDelim(']') {
					var v52 AGLotteryList
					(v52).UnmarshalEasyJSON(in)
					out.DataList = append(out.DataList, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi33(out *jwriter.Writer, in AGGetBetRecordsRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"msg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"pageIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageIndex))
	}
	{
		const prefix string = ",\"pageSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageSize))
	}
	{
		const prefix string = ",\"totalCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DataList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.DataList {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGGetBetRecordsRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGGetBetRecordsRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGGetBetRecordsRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGGetBetRecordsRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi33(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDaoGameapi34(in *jlexer.Lexer, out *AGGetBetRecordsReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startTime":
			out.StartTime = string(in.String())
		case "endTime":
			out.EndTime = string(in.String())
		case "pageIndex":
			out.PageIndex = int(in.Int())
		case "pageSize":
			out.PageSize = int(in.Int())
		case "timespan":
			out.Timespan = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDaoGameapi34(out *jwriter.Writer, in AGGetBetRecordsReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"startTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StartTime))
	}
	{
		const prefix string = ",\"endTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndTime))
	}
	{
		const prefix string = ",\"pageIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageIndex))
	}
	{
		const prefix string = ",\"pageSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PageSize))
	}
	{
		const prefix string = ",\"timespan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timespan))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AGGetBetRecordsReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AGGetBetRecordsReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDaoGameapi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AGGetBetRecordsReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AGGetBetRecordsReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDaoGameapi34(l, v)
}

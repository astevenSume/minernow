// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dao

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeUtilsGameDao(in *jlexer.Lexer, out *GameUserDailyApiResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "desc":
			out.Desc = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "curpage":
			out.Curpage = int(in.Int())
		case "perpage":
			out.Perpage = int(in.Int())
		case "maxpage":
			out.Maxpage = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]GameUserDailyApiItem, 0, 1)
					} else {
						out.Data = []GameUserDailyApiItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GameUserDailyApiItem
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao(out *jwriter.Writer, in GameUserDailyApiResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	{
		const prefix string = ",\"curpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Curpage))
	}
	{
		const prefix string = ",\"perpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Perpage))
	}
	{
		const prefix string = ",\"maxpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxpage))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameUserDailyApiResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameUserDailyApiResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameUserDailyApiResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameUserDailyApiResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDao1(in *jlexer.Lexer, out *GameUserDailyApiReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Account = string(in.String())
		case "subplatid":
			out.Subplatid = string(in.String())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "curpage":
			out.Curpage = int(in.Int())
		case "perpage":
			out.Perpage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao1(out *jwriter.Writer, in GameUserDailyApiReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	{
		const prefix string = ",\"subplatid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subplatid))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	{
		const prefix string = ",\"curpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Curpage))
	}
	{
		const prefix string = ",\"perpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Perpage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameUserDailyApiReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameUserDailyApiReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameUserDailyApiReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameUserDailyApiReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao1(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDao2(in *jlexer.Lexer, out *GameUserDailyApiItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "userid":
			out.Userid = uint64(in.Uint64())
		case "account":
			out.Account = string(in.String())
		case "winlosemoney":
			out.Winlosemoney = float64(in.Float64())
		case "chips":
			out.Chips = float64(in.Float64())
		case "tax":
			out.Tax = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao2(out *jwriter.Writer, in GameUserDailyApiItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"userid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Userid))
	}
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Account))
	}
	{
		const prefix string = ",\"winlosemoney\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Winlosemoney))
	}
	{
		const prefix string = ",\"chips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Chips))
	}
	{
		const prefix string = ",\"tax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Tax))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameUserDailyApiItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameUserDailyApiItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameUserDailyApiItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameUserDailyApiItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao2(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDao3(in *jlexer.Lexer, out *GameDailyItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "winlosemoney":
			out.WinLoseMoney = float64(in.Float64())
		case "chips":
			out.Chips = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao3(out *jwriter.Writer, in GameDailyItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"winlosemoney\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WinLoseMoney))
	}
	{
		const prefix string = ",\"chips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Chips))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameDailyItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameDailyItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameDailyItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameDailyItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao3(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDao4(in *jlexer.Lexer, out *GameDailyApiResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "desc":
			out.Desc = string(in.String())
		case "start":
			out.Start = int(in.Int())
		case "end":
			out.End = int(in.Int())
		case "curpage":
			out.Curpage = int(in.Int())
		case "perpage":
			out.Perpage = int(in.Int())
		case "maxpage":
			out.Maxpage = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]GameDailyItem, 0, 2)
					} else {
						out.Data = []GameDailyItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 GameDailyItem
					(v4).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao4(out *jwriter.Writer, in GameDailyApiResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.End))
	}
	{
		const prefix string = ",\"curpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Curpage))
	}
	{
		const prefix string = ",\"perpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Perpage))
	}
	{
		const prefix string = ",\"maxpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxpage))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameDailyApiResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameDailyApiResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameDailyApiResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameDailyApiResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao4(l, v)
}
func easyjsonC5a4559bDecodeUtilsGameDao5(in *jlexer.Lexer, out *GameDailyApiReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		case "curpage":
			out.Curpage = int(in.Int())
		case "perpage":
			out.Perpage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeUtilsGameDao5(out *jwriter.Writer, in GameDailyApiReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.End))
	}
	{
		const prefix string = ",\"curpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Curpage))
	}
	{
		const prefix string = ",\"perpage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Perpage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameDailyApiReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeUtilsGameDao5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameDailyApiReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeUtilsGameDao5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameDailyApiReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeUtilsGameDao5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameDailyApiReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeUtilsGameDao5(l, v)
}

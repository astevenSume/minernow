// Code generated by MockGen. DO NOT EDIT.
// Source: common.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOnchainTableMgrInterface is a mock of OnchainTableMgrInterface interface
type MockOnchainTableMgrInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOnchainTableMgrInterfaceMockRecorder
}

// MockOnchainTableMgrInterfaceMockRecorder is the mock recorder for MockOnchainTableMgrInterface
type MockOnchainTableMgrInterfaceMockRecorder struct {
	mock *MockOnchainTableMgrInterface
}

// NewMockOnchainTableMgrInterface creates a new mock instance
func NewMockOnchainTableMgrInterface(ctrl *gomock.Controller) *MockOnchainTableMgrInterface {
	mock := &MockOnchainTableMgrInterface{ctrl: ctrl}
	mock.recorder = &MockOnchainTableMgrInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOnchainTableMgrInterface) EXPECT() *MockOnchainTableMgrInterfaceMockRecorder {
	return m.recorder
}

// GetOnChainDataTableName mocks base method
func (m *MockOnchainTableMgrInterface) GetOnChainDataTableName(id uint64, table string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnChainDataTableName", id, table)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOnChainDataTableName indicates an expected call of GetOnChainDataTableName
func (mr *MockOnchainTableMgrInterfaceMockRecorder) GetOnChainDataTableName(id, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnChainDataTableName", reflect.TypeOf((*MockOnchainTableMgrInterface)(nil).GetOnChainDataTableName), id, table)
}

# This file is a template, and might need editing before it works on your project.
image: golang:1.11.4

variables:
  # Please edit to your GitLab project
  REPO_NAME: wallet/server

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
        - build
build_svr:
    stage: build
    only:
      - master
      - /^\d+\.\d+\.\d+$/
    tags:
      - otc-runner
    script:
      - >
       . src/tools/dbgenerate/build.sh && echo "build dbgenerate succeed!" &&
       . src/tools/dbgenerate/generate.sh && echo "execute dbgenerate succeed!" &&
       . src/tools/errorgenerate/build.sh && ls bin/ && echo "build errorgenerate succeed!" &&
       . src/tools/errorgenerate/generate.sh && echo "execute errorgenerate succeed!" &&
       . src/otc/build.sh && echo "build otc succeed!" &&
       . src/admin/build.sh && echo "build admin succeed!"
      - git clone http://deploy:12345678@103.125.216.48/wallet/go-package go-package
      - git config --global user.name "deploy"
      - git config --global user.email "deploy@qscadcf.com"
      - cd go-package
      - REF_NAME=${CI_COMMIT_REF_NAME}
      - if [ 'master' != ${CI_COMMIT_REF_NAME} ]; then REF_NAME='develop'; fi
      - git checkout ${REF_NAME}
      - cp ../bin/otc otc/
      - cp ../bin/admin admin/
      - git add otc/
      - git add admin/
      - git commit -a -m "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_ID}"
      - git pull
      - git push

#       go test $(go list ./... | egrep "otc/controllers|gatewaysvr/common|common$")

